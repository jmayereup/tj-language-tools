/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface TjLangCard {
        "dataSource": string;
    }
    interface TjReadLines {
        "setLang": string;
        "sourceID": string;
    }
    interface TjSetVoiceLanguage {
    }
    interface TjSpeak {
        "speechLang": string | null;
    }
    interface TjTranslateElement {
    }
}
export interface TjSetVoiceLanguageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTjSetVoiceLanguageElement;
}
declare global {
    interface HTMLTjLangCardElement extends Components.TjLangCard, HTMLStencilElement {
    }
    var HTMLTjLangCardElement: {
        prototype: HTMLTjLangCardElement;
        new (): HTMLTjLangCardElement;
    };
    interface HTMLTjReadLinesElement extends Components.TjReadLines, HTMLStencilElement {
    }
    var HTMLTjReadLinesElement: {
        prototype: HTMLTjReadLinesElement;
        new (): HTMLTjReadLinesElement;
    };
    interface HTMLTjSetVoiceLanguageElement extends Components.TjSetVoiceLanguage, HTMLStencilElement {
    }
    var HTMLTjSetVoiceLanguageElement: {
        prototype: HTMLTjSetVoiceLanguageElement;
        new (): HTMLTjSetVoiceLanguageElement;
    };
    interface HTMLTjSpeakElement extends Components.TjSpeak, HTMLStencilElement {
    }
    var HTMLTjSpeakElement: {
        prototype: HTMLTjSpeakElement;
        new (): HTMLTjSpeakElement;
    };
    interface HTMLTjTranslateElementElement extends Components.TjTranslateElement, HTMLStencilElement {
    }
    var HTMLTjTranslateElementElement: {
        prototype: HTMLTjTranslateElementElement;
        new (): HTMLTjTranslateElementElement;
    };
    interface HTMLElementTagNameMap {
        "tj-lang-card": HTMLTjLangCardElement;
        "tj-read-lines": HTMLTjReadLinesElement;
        "tj-set-voice-language": HTMLTjSetVoiceLanguageElement;
        "tj-speak": HTMLTjSpeakElement;
        "tj-translate-element": HTMLTjTranslateElementElement;
    }
}
declare namespace LocalJSX {
    interface TjLangCard {
        "dataSource"?: string;
    }
    interface TjReadLines {
        "setLang"?: string;
        "sourceID"?: string;
    }
    interface TjSetVoiceLanguage {
        "onVoiceChanged"?: (event: TjSetVoiceLanguageCustomEvent<string>) => void;
    }
    interface TjSpeak {
        "speechLang"?: string | null;
    }
    interface TjTranslateElement {
    }
    interface IntrinsicElements {
        "tj-lang-card": TjLangCard;
        "tj-read-lines": TjReadLines;
        "tj-set-voice-language": TjSetVoiceLanguage;
        "tj-speak": TjSpeak;
        "tj-translate-element": TjTranslateElement;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "tj-lang-card": LocalJSX.TjLangCard & JSXBase.HTMLAttributes<HTMLTjLangCardElement>;
            "tj-read-lines": LocalJSX.TjReadLines & JSXBase.HTMLAttributes<HTMLTjReadLinesElement>;
            "tj-set-voice-language": LocalJSX.TjSetVoiceLanguage & JSXBase.HTMLAttributes<HTMLTjSetVoiceLanguageElement>;
            "tj-speak": LocalJSX.TjSpeak & JSXBase.HTMLAttributes<HTMLTjSpeakElement>;
            "tj-translate-element": LocalJSX.TjTranslateElement & JSXBase.HTMLAttributes<HTMLTjTranslateElementElement>;
        }
    }
}
